{"version":3,"sources":["components/SingleChat.js","reportWebVitals.js","components/Authentication/Login.js","components/Authentication/Signup.js","Context/ChatProvider.js","Pages/Homepage.js","config/ChatLogic.js","components/miscellaneous/ProfileModal.js","components/UserAvatar/UserBadgeItem.js","components/UserAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/ScrollableChat.js","components/ChatBox.js","components/ChatLoading.js","components/miscellaneous/SideDrawer.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","Pages/Chatpage.js","App.js","index.js"],"names":["socket","selectedChatCompare","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Login","toast","useToast","navigate","useNavigate","useState","show","setShow","email","setEmail","password","setPassword","loading","setLoading","submitHandler","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","description","response","message","spacing","id","isRequired","type","value","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","res","json","url","toString","catch","err","postDetails","files","ChatContext","createContext","ChatState","useContext","ChatProvider","children","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","useEffect","userInfo","parse","getItem","Provider","Homepage","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","getSender","loggedUser","users","_id","isSameSender","messages","i","userId","length","sender","isLastMessage","isSameUser","isSameSenderMargin","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","UserBadgeItem","handleFunction","px","py","cursor","Close","pl","UserListItem","_hover","background","color","mr","UpdateGroupChatModal","fetchAgain","setFetchAgain","fetchMessages","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleRemove","user1","groupAdmin","Authorization","token","put","chatId","handleRename","chatName","handleSearch","query","get","handleAddUser","find","u","flexWrap","pb","map","admin","ml","ScrollableChat","display","label","placement","hasArrow","mt","backgroundColor","marginLeft","padding","maxWidth","content","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","sendMessage","event","key","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","ChatBox","ChatLoading","height","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","filter","n","as","Button","rightIcon","ChevronDown","removeItem","borderBottomWidth","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","Add","latestMessage","substring","Chatpage","App","path","element","exact","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c115e7a2.chunk.js","sourcesContent":["import { Box, Text } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\n \r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender,getSenderFull } from \"../config/ChatLogic\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nconst ENDPOINT = \"https://chat-appji.herokuapp.com/\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\n\r\n// when i am importing these two below socket shows err\r\n// import Lottie from \"react-lottie\";\r\n// import animationData from \"../animations/typing.json\";\r\n\r\nconst SingleChat = ({fetchAgain,setFetchAgain}) => {\r\n  const [messages, setMessages] = useState ([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n   const {user,selectedChat,setSelectedChat,notification,setNotification}=ChatState();\r\n\r\n   //\r\n   const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n// this use effect on top of all other useeffect\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n     socket.emit(\"setup\", user);\r\n     socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n     socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n   \r\n  }, [selectedChat]);\r\n\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {// give notification\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n\r\n//const sendMessage=()=>{};\r\n\r\nconst sendMessage = async (event) => {\r\n  if (event.key === \"Enter\" && newMessage) {\r\n   socket.emit(\"stop typing\", selectedChat._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      // we can put setnewmessage above bcos this is an async func which takes a secof time\r\n      setNewMessage(\"\");\r\n      const { data } = await axios.post(\r\n        \"/api/message\",\r\n        {\r\n          content: newMessage,\r\n          chatId: selectedChat,\r\n        },\r\n        config\r\n      );\r\n      //setNewMessage(\"\");\r\n     console.log(data);\r\n\r\n      socket.emit(\"new message\", data);\r\n      setMessages([...messages, data]);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to send the Message\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n\r\n//const typingHandler=()=>{};\r\nconst typingHandler = (e) => {\r\n  setNewMessage(e.target.value);\r\n\r\n   if (!socketConnected) return;\r\n\r\n  if (!typing) {\r\n    setTyping(true);\r\n    socket.emit(\"typing\", selectedChat._id);\r\n  }\r\n  let lastTypingTime = new Date().getTime();\r\n  var timerLength = 3000;\r\n  setTimeout(() => {\r\n    var timeNow = new Date().getTime();\r\n    var timeDiff = timeNow - lastTypingTime;\r\n    if (timeDiff >= timerLength && typing) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      setTyping(false);\r\n    }\r\n  }, timerLength);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n    return ( <>\r\n    {selectedChat?(\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n\r\n{!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              )}\r\n            </Text>\r\n            <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                   <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  /> \r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        \r\n            </>\r\n    ):(\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box> \r\n    )\r\n    }</> );\r\n};\r\n \r\nexport default SingleChat;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import { Button, FormControl, FormLabel, Input, InputGroup,InputRightElement, VStack } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const toast = useToast();\r\n  //const history = useHistory();\r\n  const navigate=useNavigate();\r\n    const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //const submitHandler=()=>{};\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      //history.push(\"/chats\");\r\n      navigate('/chats');\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n    return (\r\n        <VStack spacing=\"5px\">\r\n       \r\n        <FormControl id=\"email\" isRequired>\r\n          <FormLabel>Email Address</FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            value={email}\r\n            placeholder=\"Enter Your Email Address\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"password\" isRequired>\r\n          <FormLabel>Password</FormLabel>\r\n          <InputGroup size=\"md\">\r\n            <Input\r\n            value={password}\r\n              type={show ? \"text\" : \"password\"}\r\n              placeholder=\"Enter Password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <InputRightElement  width=\"4.5rem\">\r\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                {show ? \"Hide\" : \"Show\"}\r\n              </Button>\r\n            </InputRightElement>\r\n          </InputGroup>\r\n        </FormControl>\r\n       \r\n       \r\n        <Button\r\n          colorScheme=\"blue\"\r\n          width=\"100%\"\r\n          style={{ marginTop: 15 }}\r\n          onClick={submitHandler}\r\n         isLoading={loading}\r\n        >\r\n          Log In\r\n        </Button>\r\n\r\n        <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n      </VStack>\r\n      );\r\n}\r\n \r\nexport default Login;","import { Button, FormControl, FormLabel, Input, InputGroup, InputRightElement, useToast, VStack } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst Signup = () => {\r\n  //const history = useHistory();\r\n  const navigate=useNavigate();\r\n  const toast=useToast();\r\n    const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n    const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n //const postDetails=()=>{};\r\n const postDetails = (pics) => {\r\n  setPicLoading(true);\r\n  if (pics === undefined) {\r\n    toast({\r\n      title: \"Please Select an Image!\",\r\n      status: \"warning\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    return;\r\n  }\r\n  console.log(\"pcs\",pics);\r\n  if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n    const data = new FormData();\r\n    data.append(\"file\", pics);\r\n    data.append(\"upload_preset\", \"chat-app\");\r\n    data.append(\"cloud_name\", \"debhhiebz\");\r\n    fetch(\"https://api.cloudinary.com/v1_1/debhhiebz/image/upload\", {\r\n      method: \"post\",\r\n      body: data,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setPic(data.url.toString());\r\n        console.log(data.url.toString());\r\n        setPicLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setPicLoading(false);\r\n      });\r\n  } else {\r\n    toast({\r\n      title: \"Please Select an Image!\",\r\n      status: \"warning\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    setPicLoading(false);\r\n    return;\r\n  }\r\n};\r\n\r\n //const submitHandler=()=>{};\r\n\r\n const submitHandler = async () => {\r\n  setPicLoading(true);\r\n  if (!name || !email || !password || !confirmpassword) {\r\n    toast({\r\n      title: \"Please Fill all the Feilds\",\r\n      status: \"warning\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    setPicLoading(false);\r\n    return;\r\n  }\r\n  if (password !== confirmpassword) {\r\n    toast({\r\n      title: \"Passwords Do Not Match\",\r\n      status: \"warning\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    return;\r\n  }\r\n  console.log(name, email, password, pic);\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      \"/api/user\",\r\n      {\r\n        name,\r\n        email,\r\n        password,\r\n        pic,\r\n      },\r\n      config\r\n    );\r\n    console.log(data);\r\n    toast({\r\n      title: \"Registration Successful\",\r\n      status: \"success\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    setPicLoading(false);\r\n    //history.push(\"/chats\");\r\n    navigate('/chats');\r\n  } catch (error) {\r\n    toast({\r\n      title: \"Error Occured!\",\r\n      description: error.response.data.message,\r\n      status: \"error\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    setPicLoading(false);\r\n  }\r\n};\r\n\r\n    return ( \r\n        <VStack spacing=\"5px\">\r\n        <FormControl id=\"first-name\" isRequired>\r\n          <FormLabel>Name</FormLabel>\r\n          <Input\r\n            placeholder=\"Enter Your Name\"\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"email\" isRequired>\r\n          <FormLabel>Email Address</FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            placeholder=\"Enter Your Email Address\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"password\" isRequired>\r\n          <FormLabel>Password</FormLabel>\r\n          <InputGroup size=\"md\">\r\n            <Input\r\n              type={show ? \"text\" : \"password\"}\r\n              placeholder=\"Enter Password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <InputRightElement width=\"4.5rem\">\r\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                {show ? \"Hide\" : \"Show\"}\r\n              </Button>\r\n            </InputRightElement>\r\n          </InputGroup>\r\n        </FormControl>\r\n        <FormControl id=\"password\" isRequired>\r\n          <FormLabel>Confirm Password</FormLabel>\r\n          <InputGroup size=\"md\">\r\n            <Input\r\n              type={show ? \"text\" : \"password\"}\r\n              placeholder=\"Confirm password\"\r\n              onChange={(e) => setConfirmpassword(e.target.value)}\r\n            />\r\n            <InputRightElement width=\"4.5rem\">\r\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                {show ? \"Hide\" : \"Show\"}\r\n              </Button>\r\n            </InputRightElement>\r\n          </InputGroup>\r\n        </FormControl>\r\n        <FormControl id=\"pic\">\r\n          <FormLabel>Upload your Picture</FormLabel>\r\n          <Input\r\n            type=\"file\"\r\n            p={1.5}\r\n            accept=\"image/*\"\r\n            onChange={(e) => postDetails(e.target.files[0])}\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          colorScheme=\"blue\"\r\n          width=\"100%\"\r\n          style={{ marginTop: 15 }}\r\n          onClick={submitHandler}\r\n          isLoading={picLoading}\r\n        >\r\n          Sign Up\r\n        </Button>\r\n      </VStack>\r\n     );\r\n}\r\n \r\nexport default Signup;","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport {  useNavigate } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState(null);\r\n const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState([]);\r\n\r\n//const history = useHistory();\r\nconst navigate=useNavigate();\r\n\r\nuseEffect(() => {\r\n  const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  setUser(userInfo);\r\n\r\n //if (!userInfo) history.push(\"/\");\r\n \r\n}, [navigate]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n       selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;","import { Box, Container, Tab, TabList, TabPanel, TabPanels, Tabs, Text } from '@chakra-ui/react';\r\nimport { useEffect } from 'react';\r\nimport {  useNavigate } from 'react-router-dom';\r\nimport Login from '../components/Authentication/Login';\r\nimport Signup from '../components/Authentication/Signup';\r\nimport { ChatState } from '../Context/ChatProvider';\r\nconst Homepage = () => {\r\n\r\n//const history=useHistory();\r\nconst navigate=useNavigate();\r\n\r\nuseEffect(()=>{\r\n  const user=JSON.parse(localStorage.getItem(\"userInfo\"));\r\n// const user=ChatState(); \r\n// console.log(\"homepage->\",user)\r\n  if(user){\r\n   // history.push(\"/chats\");\r\n   navigate('/chats');\r\n  }\r\n},[navigate]);\r\n\r\n\r\n    return (\r\n       \r\n            <Container maxW='xl' centerContent>\r\n                <Box\r\n                    d=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    p={3}\r\n                    bg=\"white\"\r\n                    w=\"100%\"\r\n                    m=\"40px 0 15px 0\"\r\n                    borderRadius=\"lg\"\r\n                    borderWidth=\"1px\"\r\n                >\r\n                    <Text\r\n                    fontSize='4xl'\r\n                    fontFamily=\"Work sans\"\r\n                    >Talk-A-Tive</Text>\r\n                </Box>\r\n                <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n\r\n                <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n                </Box>\r\n            </Container>\r\n        \r\n    );\r\n}\r\n\r\nexport default Homepage;","\r\nexport const getSender = (loggedUser, users) => {\r\n    return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n  };\r\n\r\n  export const getSenderFull = (loggedUser, users) => {\r\n    return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n  };\r\n\r\n  export const isSameSender = (messages, m, i, userId) => {\r\n    return (\r\n      i < messages.length - 1 &&\r\n      (messages[i + 1].sender._id !== m.sender._id ||\r\n        messages[i + 1].sender._id === undefined) &&\r\n      messages[i].sender._id !== userId\r\n    );\r\n  };\r\n\r\n  export const isLastMessage = (messages, i, userId) => {\r\n    return (\r\n      i === messages.length - 1 &&\r\n      messages[messages.length - 1].sender._id !== userId &&\r\n      messages[messages.length - 1].sender._id\r\n    );\r\n  };\r\n\r\n  export const isSameUser = (messages, m, i) => {\r\n    return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n  };\r\n\r\n  export const isSameSenderMargin = (messages, m, i, userId) => {\r\n    // console.log(i === messages.length - 1);\r\n  \r\n    if (\r\n      i < messages.length - 1 &&\r\n      messages[i + 1].sender._id === m.sender._id &&\r\n      messages[i].sender._id !== userId\r\n    )\r\n      return 33;\r\n    else if (\r\n      (i < messages.length - 1 &&\r\n        messages[i + 1].sender._id !== m.sender._id &&\r\n        messages[i].sender._id !== userId) ||\r\n      (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n    )\r\n      return 0;\r\n    else return \"auto\";\r\n  };","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      \r\n      <Modal size=\"lg\" \r\n      isOpen={isOpen}\r\n      onClose={onClose}  isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {/* {admin === user._id && <span> (Admin)</span>} */}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n  //const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\n\r\n\r\nconst UpdateGroupChatModal = ({fetchAgain,setFetchAgain,fetchMessages}) => {\r\n   \r\n   \r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [groupChatName, setGroupChatName] = useState();\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [renameloading, setRenameLoading] = useState(false);\r\n    const toast = useToast();\r\n\r\n\r\n   const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n\r\n   //const handleRemove=()=>{};\r\n\r\n   const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n\r\n  // const handleRename=()=>{};\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n\r\n  // const handleSearch=()=>{};\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n   //const handleAddUser=()=>{};\r\n   const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n   \r\n\r\n    return ( \r\n        <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n     );\r\n}\r\n \r\nexport default UpdateGroupChatModal;","\r\n\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogic\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst  ScrollableChat = ({messages}) => {\r\n   \r\n   \r\n    const { user } = ChatState();\r\n   return ( \r\n<ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n     );\r\n}\r\n \r\nexport default ScrollableChat ;","import { Divider } from \"@chakra-ui/react\";\r\n\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\n\r\n\r\nconst ChatBox = ({fetchAgain,setFetchAgain}) => {\r\n\r\n\r\n\r\n    const { selectedChat } = ChatState();\r\n\r\n    return ( \r\n        <Box\r\n        d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n        alignItems=\"center\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w={{ base: \"100%\", md: \"68%\" }}\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n      </Box>\r\n      );\r\n}\r\n \r\nexport default ChatBox\r\n;","import { Skeleton, Stack } from \"@chakra-ui/react\";\r\n\r\nconst ChatLoading = () => {\r\n    return ( \r\n    <Stack>\r\n<Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack> );\r\n}\r\n \r\nexport default ChatLoading;","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport ChatLoading from '../ChatLoading';\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport {  useNavigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\n// import ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\n import ProfileModal from \"./ProfileModal\";\r\n  import NotificationBadge from \"react-notification-badge\";\r\n import { Effect } from \"react-notification-badge\";\r\n import { getSender } from \"../../config/ChatLogic\";\r\n import UserListItem from \"../UserAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst SideDrawer = () => {\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  \r\n\r\n  const toast = useToast();\r\n  const {user,setSelectedChat,chats,setChats,notification,setNotification}=ChatState();\r\n  \r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n // const history = useHistory();\r\n const navigate=useNavigate();\r\n\r\n  const logoutHandler = () => {\r\n    \r\n    localStorage.removeItem(\"userInfo\");\r\n   // history.push(\"/\");\r\n\r\n   navigate('/');\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  //const accessChat=()=>{};\r\n  const accessChat = async (userId) => {\r\n  console.log(userId);\r\n\r\n  try {\r\n    setLoadingChat(true);\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n     if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n    setSelectedChat(data);\r\n    setLoadingChat(false);\r\n    onClose();\r\n  } catch (error) {\r\n    toast({\r\n      title: \"Error fetching the chat\",\r\n      description: error.message,\r\n      status: \"error\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom-left\",\r\n    });\r\n  }\r\n};\r\n\r\n    return ( \r\n        <div>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n               <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              /> \r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList> \r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n\r\n                <MenuItem>My Profile</MenuItem>\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem \r\n               onClick={logoutHandler}\r\n            >Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n       <Drawer placement=\"left\" \r\n      onClose={onClose} \r\n      isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button \r\n           onClick={handleSearch}\r\n              >Go</Button>\r\n            </Box>\r\n             {loading ? (\r\n             <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n              \r\n            )} \r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer> \r\n    </div>\r\n     );\r\n}\r\n \r\nexport default SideDrawer;","\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    useDisclosure,\r\n    FormControl,\r\n    Input,\r\n    useToast,\r\n    Box,\r\n    Text,\r\n  } from \"@chakra-ui/react\";\r\n  import axios from \"axios\";\r\n  import { useState } from \"react\";\r\n  import { ChatState } from \"../../Context/ChatProvider\";\r\n  import UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\n  import UserListItem from \"../UserAvatar/UserListItem\";\r\n\r\n\r\n\r\nconst GroupChatModal = ({children}) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [groupChatName, setGroupChatName] = useState();\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const toast = useToast();\r\n  \r\n    const { user, chats, setChats } = ChatState();\r\n\r\n\r\n\r\n    //const handleGroup=()=>{};\r\n\r\n    const handleGroup = (userToAdd) => {\r\n      if (selectedUsers.includes(userToAdd)) {\r\n        toast({\r\n          title: \"User already added\",\r\n          status: \"warning\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"top\",\r\n        });\r\n        return;\r\n      }\r\n  \r\n      setSelectedUsers([...selectedUsers, userToAdd]);\r\n    };\r\n\r\n\r\n    //const handleSearch=()=>{};\r\n    const handleSearch = async (query) => {\r\n        setSearch(query);\r\n        if (!query) {\r\n          return;\r\n        }\r\n    \r\n        try {\r\n          setLoading(true);\r\n          const config = {\r\n            headers: {\r\n              Authorization: `Bearer ${user.token}`,\r\n            },\r\n          };\r\n          const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n        //  console.log(data);\r\n          setLoading(false);\r\n          setSearchResult(data);\r\n        } catch (error) {\r\n          toast({\r\n            title: \"Error Occured!\",\r\n            description: \"Failed to Load the Search Results\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom-left\",\r\n          });\r\n        }\r\n      };\r\n   \r\n    //const handleDelete=()=>{};\r\n\r\n    const handleDelete = (delUser) => {\r\n      setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n    };\r\n   \r\n   // const handleSubmit=()=>{};\r\n   const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      //we adding data in setchats first bcos we want new data first\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n    return ( \r\n        <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n\r\n\r\n\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n                // .slice just to show top 4 result\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n\r\n\r\n\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n     );\r\n}\r\n \r\nexport default GroupChatModal;","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Button, Stack, Text, useToast } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport axios from 'axios';\r\nimport {getSender} from '../config/ChatLogic';\r\nimport ChatLoading from '../components/ChatLoading';\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\n\r\nconst MyChats = ({fetchAgain}) => {\r\nconst [loggedUser,setLoggedUser]=useState();\r\n    const {selectedChat,setSelectedChat,user,chats,setChats}=ChatState();\r\n    \r\nconst toast=useToast();\r\n\r\n\r\nconst fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n      console.log(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  \r\n  }, [fetchAgain]);\r\n\r\n\r\n    return ( \r\n      <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\">\r\n\r\n<Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {loggedUser && !chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n\r\n\r\n\r\n      </Box>\r\n\r\n\r\n      </Box>\r\n     );\r\n}\r\n \r\nexport default MyChats;","import { Box } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ChatBox from '../components/ChatBox';\r\nimport SideDrawer from '../components/miscellaneous/SideDrawer';\r\nimport MyChats from '../components/MyChats';\r\nimport { ChatState } from '../Context/ChatProvider';\r\nconst Chatpage = () => {\r\n\r\n   //const history=useHistory();\r\n   const navigate=useNavigate();\r\n  const {user}=ChatState();\r\n  const [fetchAgain,setFetchAgain]=useState(false);\r\n\r\n \r\n   \r\n\r\n\r\n//    const [chats,setChats]=useState([]);\r\n// const fetchChats =async()=>{\r\n//     // {data} only for destructured bcos data shows may things like header response\r\n//     const {data} =await axios.get(\"/api/chat\");\r\n//     console.log(data);\r\n//     setChats(data);\r\n// };\r\n// useEffect(()=>{\r\n// fetchChats();\r\n// },[]);\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn ( \r\n\r\n      //   <div>{chats?.map(chat => (<div key={chat._id}> {chat.chatName}</div>)\r\n      //   )}</div>\r\n\r\n<div style={{width:\"100%\"}}>\r\n   {user && <SideDrawer></SideDrawer>}\r\n   <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\" >\r\n\r\n{user && <MyChats fetchAgain={fetchAgain}  />}\r\n{user && <ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}> </ChatBox>}\r\n\r\n   </Box>\r\n</div>\r\n\r\n     );\r\n}\r\n \r\nexport default Chatpage;","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport {  BrowserRouter as Router,Route, Routes } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n   // <Router>\n    <div className=\"App\">\n    <Routes>\n      {/* component */}\n      <Route path=\"/\" element={<Homepage ></Homepage>} exact />\n      <Route path=\"/chats\" element={<Chatpage></Chatpage>} />\n      </Routes>\n    </div>\n   // </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport ChatProvider from './Context/ChatProvider';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n    // <React.StrictMode>\n        <BrowserRouter>\n        \n        <ChatProvider>\n        <ChakraProvider>\n    \n   \n     <App />\n     \n     \n     </ChakraProvider>\n     </ChatProvider>\n     \n     </BrowserRouter>\n     // </React.StrictMode> \n     \n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}